@using Ecommerce.Web.Commons;
@model ProductViewModel;
<script>
    $(document).ready(function () {
        bsCustomFileInput.init();
        checkAction();
        formValidate();
    });

    function checkAction() {
        let action = '@Model.Action';
        switch (action) {
            case '@Constants.Action.View': {
                $('#btnSave').hide();
                setReadOnlyByDiv('frmDetail', true);
                break;
            }
            case '@Constants.Action.Add': {
                $('#Status').val('A');
                break;
            }
        }
    }

    function formValidate() {
        $.validator.setDefaults({
            submitHandler: function () {
                save();
            }
        });
        $('#frmDetail').validate({
            rules: {
                ProductId: {
                    required: true,
                    minlength: 3
                },
                ProductName: {
                    required: true,
                    minlength: 3
                },
                CategoryId: {
                    required: true,
                },
                Stock: {
                    required: true,
                },
                Price: {
                    required: true,
                },
                Status: {
                    required: true
                }
            },
            messages: {
                ProductId: {
                    required: "กรุณาระบุรหัสสินค้า",
                },
                ProductName: {
                    required: "กรุณาระบุชื่อสินค้า",
                },
                CategoryId: {
                    required: "กรุณาระบุประเภทสินค้า",
                },
                Stock: {
                    required: "กรุณาระบุจำนวนสินค้า",
                },
                Price: {
                    required: "กรุณาระบุราคาสินค้า",
                },
                Status: {
                    required: "กรุณาเลือกสถานะ",
                }
            },
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                element.closest('.form-group').append(error);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid');
            }
        });
    }

    function setValueImage() {
        let fileName = $('#fileName').val().replace(/C:\\fakepath\\/i, '');
        if (fileName != null && fileName != '')
            $('#Image').val(fileName);
    }

    function save() {
        setValueImage();
        let url = '@Url.Content(Constants.UrlAction.Product.Save)';
        let data = $('#frmDetail').serializeObject();
        $.post(url, data, function (response) {
            if (response.isSuccess) uploadImage(response);
            else swalMessage('error', response.message);
        });
    }

    function uploadImage(response) {
        const formData = new FormData(document.forms.item(0));
        let file = $('#fileName').prop("files")[0];
        formData.append('file', file);
        formData.append('productId', response.value.productId);
        formData.append('message', response.message);
        $.ajax({
            url: '@Url.Content(Constants.UrlAction.Product.SaveImage)',
            type: 'POST',
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            success: (response) => {
                if (response.isSuccess) {
                    swalMessage('success', response.message);
                    closeModal();
                    getList();
                }
            }
        });
    }
</script>
