@using Ecommerce.Web.Commons;
@using Ecommerce.Web.Extenions.Class;
@using Ecommerce.Web.Models.User;
@using Ecommerce.Web.Services.Interfaces;
@using Microsoft.Extensions.Options;
@inject ICommonService common;
@inject IOptions<AppSetting> options
@model User;
<script>
    //client
    let url = '@Url.Content(Constants.UrlAction.User.PopUpDialog)';
    //api
    let baseApiUrl = '@options.Value.BaseApiUrl';
    let getListUrl = baseApiUrl + 'User/GetList';
    let insertUrl = baseApiUrl + 'User/Add';
    let updateUrl = baseApiUrl + 'User/Update';
    let deleteUrl = baseApiUrl + 'User/Delete/';
    let select2User = baseApiUrl + 'User/select2UserName';
    let select2Position = baseApiUrl + 'User/select2Position';

    $(function () {
        setSelect2();
        getList();
        $('.btn[data-filter]').on('click', function () {
            $('.btn[data-filter]').removeClass('active');
            $(this).addClass('active');
        });
    });

    function getList() {
        var _obj = new Object();
        _obj.userId = $('#txtUsername').val();
        _obj.positionId = $('#@Html.IdFor(m => m.PositionId)').val();
        _obj.status = $('#@Html.IdFor(m => m.Status)').val();
        $.ajax({
            type: "POST",
            url: getListUrl,
            headers: {
                'Authorization': 'bearer ' + _token
            },
            data: JSON.stringify(_obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (response) {
                if (response.isSuccess) onSuccess(response);///////
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
                window.location.href = '/ErrorPages/' + jqXHR.status;
            }
        })
    }

    function onSuccess(response) {
        $('#dtResult').DataTable({
            bDestroy: true,
            bProcessing: true,
            bLenghtChange: true,
            lengthMenu: [[5, 10, 25, -1], [5, 10, 25, "All"]],
            searching: false, //ช่อง search
            responsive: true,
            autoWidth: false,
            bfilter: true,
            bSort: true,
            bPaginate: true,
            lengthChange: true, //ปุ่มจำนวนแสดงข้อมูล
            data: response.value,
            columns: [
                {
                    data: 'username',
                    render: function (data, type, row, meta) {
                        return row.username
                    }
                },
                {
                    data: 'fullName',
                    render: function (data, type, row, meta) {
                        return row.fullName
                    }
                },
                {
                    data: 'email',
                    render: function (data, type, row, meta) {
                        return row.email
                    }
                },
                {
                    data: 'positionName',
                    render: function (data, type, row, meta) {
                        return row.positionName
                    }
                },
                {
                    data: 'address',
                    render: function (data, type, row, meta) {
                        return row.address
                    }
                },
                {
                    data: 'status',
                    render: function (data, type, row, meta) {
                        if (row.status === 'A') {
                            return '<span class="badge bg-success">'
                                + '' + 'ใช้งาน' + ''
                                + '</span>'
                        }
                        else if (row.status === 'I') {
                            return '<span class="badge bg-dark">'
                                + '' + 'ไม่ได้ใช้งาน' + ''
                                + '</span> '
                        }
                        else {
                            return "";
                        }
                    }
                },
                {
                    data: 'createDate',
                    render: function (data, type, row, meta) {
                        return row.createDate
                    }
                },
                {
                    data: 'userId',
                    render: function (data, type, row, meta) {
                        return '<a class="btn btn-info" onclick=openPopup("' + row.userId + '","View","' + url + '","ดูข้อมูลผู้ใช้งาน");>'
                            + '<i class="fas fa-eye"></i></a> | '
                            + '<a class="btn btn-warning" onclick=openPopup("' + row.userId + '","Update","' + url + '","แก้ไขข้อมูลผู้ใช้งาน");>'
                            + '<i class="fas fa-pen"></i></a> | '
                            + '<a class="btn btn-danger" onclick=confirmDelete("' + row.userId + '","' + deleteUrl + '","' + row.username + '");>'
                            + '<i class="fas fa-trash"></a>'
                    }
                }
            ]
        })
    }

    function setSelect2() {
        $("#txtUsername").select2({
            placeholder: "--- กรุณาเลือก ---",
            minimumInputLength: 1,
            dropdownAutoWidth: 'true',
            width: '100%',
            allowClear: true,
            ajax: {
                type: "GET",
                url: select2User,
                headers: { 'Authorization': 'bearer ' + _token },
                delay: 50,
                dataType: 'json',
                quietMillis: 1000,
                data: function (params) { return { query: params.term }; },
                processResults: function (data) {
                    return {
                       results: $.map(data.value, function (obj) {
                            return {
                                id: obj.userId,
                                text: obj.username + ' : ' + obj.fullName
                            };
                        })
                    };
                }
            }
        });

        $("#@Html.IdFor(m => m.PositionId)").select2({
            placeholder: "--- กรุณาเลือก ---",
            minimumInputLength: 1,
            dropdownAutoWidth: 'true',
            width: '100%',
            allowClear: true,
            ajax: {
                type: "GET",
                url: select2Position,
                headers: { 'Authorization': 'bearer ' + _token },
                delay: 50,
                dataType: 'json',
                quietMillis: 1000,
                data: function (params) { return { query: params.term }; },
                processResults: function (data) {
                    return {
                        results: $.map(data.value, function (obj) {
                            return {
                                id: obj.positionId,
                                text: obj.positionName
                            };
                        })
                    };
                }
            }
        });
    }

    function resetform() {
        $("#dtResult").dataTable().fnClearTable();
        $("#txtUsername").empty().trigger('change')
        $("#@Html.IdFor(m => m.PositionId)").empty().trigger('change')
        $("#@Html.IdFor(m => m.Status)").val('');
    }
</script>

